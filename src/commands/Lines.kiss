// Perform a synchronous transformation on each selected line of text
(function _mapLinesSync [selectedText mapFunc]
    (let [:String->String safeMapFunc
                    ->[line]
                        (ifLet [trimmedLine (StringTools.trim line)] (try (mapFunc trimmedLine) (catch [e] (Std.string e))) "")
                mappedText 
                    (.join
                        (map
                            (.split selectedText "\n")
                            safeMapFunc)
                        "\n")]
            (.edit activeTextEditor
                (lambda [e]
                    (let [editor activeTextEditor]
                        (e.delete editor.selection)
                        (e.insert editor.selection.active mappedText))))))

(defCommand context mapLinesSync "Transform the selected text lines using a String->String kiss function" "C-; C-m" []
    (awaitLet [mapFuncStr (inputEditor "mapLinesFunc.kiss" "a String->String function through which to map the selected lines")]
        (let [:String->String mapFunc (evalString mapFuncStr)]
            (_mapLinesSync (selectedText) mapFunc))))

// Sort the selected lines of text using a comparison function (String,String) -> Int
(function _sortLinesSync [selectedText :Dynamic compareFunc]
    (let [lines (selectedText.split "\n")]
        (lines.sort compareFunc)
        (.edit activeTextEditor
            (lambda [e]
                (let [editor activeTextEditor]
                    (e.delete editor.selection)
                    (e.insert editor.selection.active (lines.join "\n")))))))

(defCommand context sortLinesSync "Sort the selected text lines using a (String,String)->Int comparator function" "" []
    (awaitLet [compareFuncStr (inputEditor "sortLinesFunc.kiss" "a (String,String) -> Int function with which to sort the selected lines")]
        (_sortLinesSync (selectedText) (if (< 0 compareFuncStr.length) (evalString compareFuncStr) Reflect.compare))))

(defCommand context sortLinesSyncDefault "Sort the selected lines lexicographically" "C-; C-s" []
    (_sortLinesSync (selectedText) Reflect.compare))

(defCommand context sortLinesSyncEOL "Sort the selected lines lexicographically from the end of each line" "" []
    (_sortLinesSync (selectedText) ->[:String s1 :String s2] (Reflect.compare (s1.reverse) (s2.reverse))))

// Example: editMonster(monster, MONSTER) -> editItem(item, ITEM)
(defCommand context findReplaceTokenMatchCase "Find and replace a token, matching case" "" []
    (localVar &mut idx 0)
    (localVar &mut output "")
    (awaitLet [find (inputBox)
                replace (inputBox)
                &sync findLower (find.toLowerCase)
                &sync text (selectedText)
                &sync textLower (text.toLowerCase)
                &sync textHits []
                &sync textHitTokens []]
        (unless text (print "No text selected!") (return))
        (unless find (print "Nothing to find!") (return))
        (while (< idx text.length)
            (set idx (textLower.indexOf findLower idx))
            (when (= -1 idx) (break))
            (textHits.push idx)
            (textHitTokens.push (text.substr idx find.length))
            (+= idx find.length))
        (set idx 0)
        (doFor [hit :String hitToken] (zip textHits textHitTokens)
            (+= output (text.substr idx (- hit idx)))
            (cond
                // all caps
                ((hitToken.isUpperCase)
                    (+= output (replace.toUpperCase)))
                // all lower
                ((hitToken.isLowerCase)
                    (+= output (replace.toLowerCase)))
                // first letter capitalized
                ((.isUpperCase (hitToken.charAt 0))
                    (+= output (replace.toUpperCamel))))
            (set idx (+ hit find.length)))
        (+= output (text.substr idx))
        (.edit activeTextEditor
            (lambda [e]
                (let [editor activeTextEditor]
                    (e.delete editor.selection)
                    (e.insert editor.selection.active output))))
        (return)))

(defCommand context findReplaceIncrement "Find text suffixed by a non-negative integer, and replace it, incrementing the number by line" "" []
    (localVar &mut outputLines [])
    (localVar &mut lineFound 0)
    (awaitLet [findNumStr (inputBox)
                &sync length findNumStr.length
                &sync text (selectedText)]
        (unless text (print "No text selected!") (return))
        (unless findNumStr (print "Nothing to find!") (return))
        // Find where the number suffix starts
        (let [&mut numStartIdx 0]
            (while (< numStartIdx length)
            	(when (.contains "0123456789" (findNumStr.charAt numStartIdx))
                    (break))
                ++numStartIdx)
            (when (>= numStartIdx length) (print "text must be suffixed by a non-negative integer!") (return))
            
            (let [prefix (findNumStr.substr 0 numStartIdx)
                    num (Std.parseInt (findNumStr.substr numStartIdx))
                    lines (text.split "\n")]
                (doFor line lines
                    (if (line.contains findNumStr)
                            {
                                (let [newStr "${prefix}$(+ num lineFound)"]
                                    (outputLines.push (line.replace findNumStr newStr)))
                                ++lineFound
                            }
                        (outputLines.push line)))))
        (.edit activeTextEditor
            (lambda [e]
                (let [editor activeTextEditor]
                    (e.delete editor.selection)
                    (e.insert editor.selection.active (outputLines.join "\n")))))
        (return)))